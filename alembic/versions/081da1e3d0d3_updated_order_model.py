from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '081da1e3d0d3'
down_revision: Union[str, None] = '12f153693f40'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###

    # Step 1: Add columns as nullable=True to avoid NotNullViolation errors on existing rows
    op.add_column('orders', sa.Column('full_name', sa.String(), nullable=True))
    op.add_column('orders', sa.Column('full_address', sa.String(), nullable=True))
    op.add_column('orders', sa.Column('phone_no', sa.String(), nullable=True))
    op.add_column('orders', sa.Column('country', sa.String(), nullable=True))
    op.add_column('orders', sa.Column('inside_dhaka', sa.Boolean(), nullable=True))  # Allow NULL initially
    op.add_column('orders', sa.Column('total_price', sa.Numeric(precision=10, scale=2), nullable=True))  # Allow NULL initially

    # Step 2: Populate existing rows with default values (e.g., empty string for text fields, False for booleans, 0 for total_price)
    op.execute("UPDATE orders SET full_name = '' WHERE full_name IS NULL")
    op.execute("UPDATE orders SET full_address = '' WHERE full_address IS NULL")
    op.execute("UPDATE orders SET phone_no = '' WHERE phone_no IS NULL")
    op.execute("UPDATE orders SET country = '' WHERE country IS NULL")
    op.execute("UPDATE orders SET inside_dhaka = FALSE WHERE inside_dhaka IS NULL")  # Set default False
    op.execute("UPDATE orders SET total_price = 0 WHERE total_price IS NULL")  # Set default 0 for total_price

    # Step 3: Alter columns to NOT NULL after populating existing rows
    op.alter_column('orders', 'full_name', nullable=False)
    op.alter_column('orders', 'full_address', nullable=False)
    op.alter_column('orders', 'phone_no', nullable=False)
    op.alter_column('orders', 'country', nullable=False)
    op.alter_column('orders', 'inside_dhaka', nullable=False)  # Set NOT NULL
    op.alter_column('orders', 'total_price', nullable=False)  # Set NOT NULL

    # Step 4: Drop old columns that are no longer needed
    op.drop_column('orders', 'total_amount')
    op.drop_column('orders', 'last_name')
    op.drop_column('orders', 'first_name')
    op.drop_column('orders', 'apartment')
    op.drop_column('orders', 'street_address')
    op.drop_column('orders', 'city')
    op.drop_column('orders', 'phone')

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('orders', sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('orders', sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('orders', sa.Column('street_address', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('orders', sa.Column('apartment', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('orders', sa.Column('first_name', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('orders', sa.Column('last_name', sa.VARCHAR(), autoincrement=False, nullable=False))
    op.add_column('orders', sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False))
    op.drop_column('orders', 'total_price')
    op.drop_column('orders', 'inside_dhaka')
    op.drop_column('orders', 'country')
    op.drop_column('orders', 'phone_no')
    op.drop_column('orders', 'full_address')
    op.drop_column('orders', 'full_name')
    # ### end Alembic commands ###
